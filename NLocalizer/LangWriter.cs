/*******************************************************************************

  NLocalizer (C) 2010 Krzysztof Arkadiusz Prusik
  The fast, simple solution for localizing .NET applications, by text files.
  Latest version: http://NLocalizer.codeplex.com/

  $Id: LangWriter.cs 3210 2010-10-03 03:06:53Z unknown $

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

*******************************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Forms;

namespace NLocalizer
{
    /// <summary>
    /// Helper which write language files into application directory
    /// </summary>
    public static class LangWriter
    {
        /// <summary>
        /// Create string builder from the specified translation.
        /// </summary>
        /// <param name="language">The language.</param>
        /// <param name="translation">The translation.</param>
        /// <returns></returns>
        public static StringBuilder ToStringBuilder(string language, Translation translation)
        {
            StringBuilder str = new StringBuilder();
            str.AppendLine("; NLocalizer (C) Krzysztof Arkadiusz Prusik, NLocalizer.codeplex.com");
            str.AppendLine(String.Format("; Language file: {0}, autogenerated {1}",
                language, DateTime.Now.ToShortDateString()));
            str.AppendLine("; $Id" + "$");
            str.AppendLine(";");

            string textLocales = "";
            foreach (KeyValuePair<string, string> localeItem in translation.Locales)
                if (localeItem.Value == language)
                    textLocales += localeItem.Key + ", ";
            if (textLocales != "")
                str.AppendLine("locale " + textLocales);

            if (translation.CodeModules.Count > 0)
            {
                str.Append("module ");
                foreach (string moduleItem in translation.CodeModules)
                    str.Append(moduleItem + ", ");
                str.AppendLine();
            }

            if (translation.CodeUsings.Count > 0)
            {
                str.Append("using ");
                foreach (string usingItem in translation.CodeUsings)
                    str.Append(usingItem + ", ");
                str.AppendLine();
            }

            if (translation.StaticClasses.Count > 0)
            {
                str.Append("static ");
                foreach (string staticItem in translation.StaticClasses)
                    str.Append(staticItem + ", ");
                str.AppendLine();
            }

            if (translation.Exists(language))
                foreach (KeyValuePair<string, TranslationProperties> classItem in translation[language])
                    foreach (KeyValuePair<string, string> propertyItem in classItem.Value)
                        str.AppendLine(String.Format("({0}){1} = {2}",
                            classItem.Key, propertyItem.Key, propertyItem.Value));

            return str;
        }

        /// <summary>
        /// Write the specified language from translation into the directory name.
        /// </summary>
        /// <param name="directoryName">Name of the directory.</param>
        /// <param name="language">The language.</param>
        /// <param name="translation">The translation.</param>
        public static void Write(string directoryName, string language, Translation translation)
        {
            File.WriteAllText(Path.Combine(directoryName, language + ".lang"),
                ToStringBuilder(language, translation).ToString());
        }

        /// <summary>
        /// Write the specified translation into file in directory.
        /// </summary>
        /// <param name="directoryName">Name of the directory.</param>
        /// <param name="translation">The translation.</param>
        public static void Write(string directoryName, Translation translation)
        {
            foreach (KeyValuePair<string, TranslationClasses> languageItem in translation)
                if (languageItem.Key != "Neutral")
                    Write(directoryName, languageItem.Key, translation);
        }

        /// <summary>
        /// Write all the specified translation into files in the application directory.
        /// </summary>
        /// <param name="translation">The translation.</param>
        public static void Write(Translation translation)
        {
            Write(Path.GetDirectoryName(Application.ExecutablePath), translation);
        }

    }
}